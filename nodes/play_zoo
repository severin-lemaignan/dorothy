#!/usr/bin/env python

import random

import math
import rospy
import tf

import actionlib

from geometry_msgs.msg import PoseStamped, Point
from visualization_msgs.msg import MarkerArray, Marker
import zoo_map_maker.msg

MAP_HEIGHT=0.335

REFERENCE_FRAME="/sandtray"

ZONES = {
        "lake": [(5.8,17.), (11.,16.),(14.7,12.8),(18.3,9.),(15.,0.5),(7.8,1.5),(2.3,6.3),(2.1,11.8)],
        "savannah": [(45.,33.),(46.8,25.5),(53.3,22.),(60.,22.1),(60.,33.5)],
        "plain": [(40.,0.),(36.3,5.1),(41.5,11.7),(50.5,13.),(54.,0.)]
        }

def to_map(p):
    x,y = p
    return x/100, -(MAP_HEIGHT - y/100)

# convert zones to meters with right origin
for k,v in ZONES.items():
    ZONES[k] = [to_map(p) for p in v]

HABITATS = {"crocodile": "lake",
            "leopard": "savannah",
            "giraffe": "savannah",
            "rhino": "plain",
            "hippo": "lake",
            "zebra": "plain",
            "elephant": "plain",
            "lion": "savannah"
            }
ANIMALS = ["zebra","elephant","leopard","lion","giraffe","rhino","crocodile","hippo"]

tl=None

def get_pose(item):

    try:
        (trans,rot) = tl.lookupTransform(REFERENCE_FRAME, item, rospy.Time(0))
    except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as e:
        rospy.logerr("TF exception! " + e.value())
        return 0.,0.

    return trans[0], trans[1]

def isin(point,polygon):
    """
    Determines if a 2D point is inside a given 2D polygon or not.
    
    :param point: a (x,y) pair
    :param polygon: a list of (x,y) pairs.
    
    Copied from: http://www.ariel.com.au/a/python-point-int-poly.html
    """

    x,y = point
    n = len(polygon)
    inside =False

    p1x,p1y = polygon[0]
    for i in range(n+1):
        p2x,p2y = polygon[i % n]
        if y > min(p1y,p2y):
            if y <= max(p1y,p2y):
                if x <= max(p1x,p2x):
                    if p1y != p2y:
                        xinters = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x
                    if p1x == p2x or x <= xinters:
                        inside = not inside
        p1x,p1y = p2x,p2y

    return inside

def dist(a, b=(0,0)):

    return math.sqrt(math.pow(a[0] - b[0],2) + math.pow(a[1]-b[1],2))

def publish_zones():

    markers = MarkerArray()

    id=0
    for zone, poly in ZONES.items():

        marker = Marker()
        marker.header.frame_id = REFERENCE_FRAME
        marker.header.stamp = rospy.Time.now()
        marker.ns = "zoo_zones"
        marker.action = Marker.ADD
        marker.pose.orientation.w = 1.0

        marker.id = id
        id += 1
        marker.type = Marker.LINE_STRIP
        marker.scale.x = 0.005
        marker.color.g = 1.0
        marker.color.a = 1.0


        for v in poly:
            x,y=v
            p = Point(x=x, y=y)
            marker.points.append(p)

        marker.points.append(marker.points[0])

        markers.markers.append(marker)

    pub_markers.publish(markers)





def get_point_in_zone(zone):
    poly = ZONES[zone]

    x=0; y=0
    for p in poly:
        dx, dy = p
        x+=dx
        y+=dy

    return Point(x=x/len(poly), y=y/len(poly))

def place_random_animal():

    animal = random.choice(ANIMALS)
    x,y = get_pose(animal)
    #rospy.loginfo("%s is at (%.2f,%.2f)" % (animal,x,y))

    zone = HABITATS[animal]

    if not isin((x,y), ZONES[zone]):
        rospy.loginfo("Sending %s to %s" % (animal, zone))
        goal = zoo_map_maker.msg.ZooNavigationGoal(item=animal,goal=get_point_in_zone(zone))
        motion.send_goal(goal)
        motion.wait_for_result()

        return True

    return False

if __name__ == "__main__":

    rospy.init_node('zoo_player')

    tl = tf.TransformListener()

    pub_markers = rospy.Publisher("zones", MarkerArray, queue_size=5, latch=True);

    motion = actionlib.SimpleActionClient('zoo_trajectory_tracker', zoo_map_maker.msg.ZooNavigationAction)
    motion.wait_for_server()

    publish_zones()

    rospy.loginfo("Ready to play!")

    while not rospy.is_shutdown():
 
        ok = place_random_animal()
        if ok:
            rospy.sleep(1)
        else:
            rospy.sleep(0.1)

